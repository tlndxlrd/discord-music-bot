const { MessageEmbed, MessageActionRow, MessageButton } = require("discord.js");

module.exports = {
    data: {
        name: 'queue'
    },

    run: async (client, interaction, player) => {

        interaction.deferReply({ ephemeral: true })
        
        const row = new MessageActionRow().addComponents(
            new MessageButton()
                .setCustomId('back')
                .setLabel('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                .setStyle('SECONDARY'),
            new MessageButton()
                .setCustomId('next')
                .setLabel('‚û°Ô∏è –í–ø–µ—Ä–µ–¥')
                .setStyle(`PRIMARY`),
        )

        const queue = player.getQueue(interaction.guildId)

        let embed = new MessageEmbed()

        embed
            .setTitle('‚ùå |–û—à–∏–±–∫–∞')
            .setDescription('–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤')

        if (!queue || !queue.playing) {
            return await interaction.reply({ embeds: [embed], ephemeral: true })
        }

        const totalPages = Math.ceil(queue.tracks.length / 10) || 1

        let currentPage = 0

        let page = 0 + currentPage

        embed
            .setTitle('‚ùå |–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
            .setDescription(`–í—Å–µ–≥–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ ${totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ç—Ä–µ–∫–∞–º–∏`)

        if (page > totalPages) {
            return await interaction.reply({ embeds: [embed], ephemeral: true })
        }

        const queueString = queue.tracks.slice(page * 10, page * 10 + 10).map((song, i) => {
            return `**${page * 10 + i + 1}.** \`[üïû |${song.duration}]\` ${song.author} - ${song.title} -- <@${song.requestedBy.id}>`
        }).join("\n")

        const currentSong = queue.current

        embed
            .setTitle('‚úÖ |–í—ã–ø–æ–ª–Ω–µ–Ω–æ')
            .setDescription(`üé∂ |**–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç**\n` +
                (currentSong ? `\`[üïû |${currentSong.duration}]\` ${currentSong.author}  - ${currentSong.title} -- <@${currentSong.requestedBy.id}>` : "None") +
                `\n\n**–û—á–µ—Ä–µ–¥—å**\n${queueString}`
            )
            .setFooter({
                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}`
            })
            .setThumbnail(currentSong.setThumbnail)

        let myButtonMsg = await interaction.channel.send({ embeds: [embed], components: [row] })

        const collector = myButtonMsg.createMessageComponentCollector(async (button) => button.clicker.customId === interaction.customId, { time: 1000 * 1000 * 60 })

        collector.on('collect', async (b) => {
            console.log(b.customId)
            if (b.customId === 'next') {

                await b.deferReply({ ephemeral: true })

                embed
                    .setTitle('‚ùå |–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
                    .setDescription(`–°—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—á–∏–ª–∏—Å—å`)

                if (page > totalPages - 2) {
                    return await b.editReply({ embeds: [embed], ephemeral: true })
                }

                currentPage = + 1
                page = page + currentPage

                const queueString = queue.tracks.slice(page * 10, page * 10 + 10).map((song, i) => {
                    return `**${page * 10 + i + 1}.** \`[üïû |${song.duration}]\` ${song.author} - ${song.title} -- <@${song.requestedBy.id}>`
                }).join("\n")

                const currentSong = queue.current

                embed
                    .setTitle('‚úÖ |–í—ã–ø–æ–ª–Ω–µ–Ω–æ')
                    .setDescription(`üé∂ |**–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç**\n` +
                        (currentSong ? `\`[üïû |${currentSong.duration}]\` ${currentSong.author}  - ${currentSong.title} -- <@${currentSong.requestedBy.id}>` : "None") +
                        `\n\n**–û—á–µ—Ä–µ–¥—å**\n${queueString}`
                    )
                    .setFooter({
                        text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}`
                    })
                    .setThumbnail(currentSong.setThumbnail)

                await myButtonMsg.edit({ embeds: [embed], components: [row] })
            }

            if (b.customId === 'back') {

                await b.deferReply({ ephemeral: true })

                embed
                    .setTitle('‚ùå |–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
                    .setDescription(`–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ`)

                if (page < 1) {
                    return await b.editReply({ embeds: [embed], ephemeral: true })
                }

                currentPage = 1
                page = page - currentPage

                const queueString = queue.tracks.slice(page * 10, page * 10 + 10).map((song, i) => {
                    return `**${page * 10 + i + 1}.** \`[üïû |${song.duration}]\` ${song.author} - ${song.title} -- <@${song.requestedBy.id}>`
                }).join("\n")

                const currentSong = queue.current

                embed
                    .setTitle('‚úÖ |–í—ã–ø–æ–ª–Ω–µ–Ω–æ')
                    .setDescription(`üé∂ |**–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç**\n` +
                        (currentSong ? `\`[üïû |${currentSong.duration}]\` ${currentSong.author}  - ${currentSong.title} -- <@${currentSong.requestedBy.id}>` : "None") +
                        `\n\n**–û—á–µ—Ä–µ–¥—å**\n${queueString}`
                    )
                    .setFooter({
                        text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}`
                    })
                    .setThumbnail(currentSong.setThumbnail)

                await myButtonMsg.edit({ embeds: [embed], components: [row] })
            }
        })
    }
}