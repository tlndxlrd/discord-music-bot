const { SlashCommandBuilder } = require("@discordjs/builders")
const { MessageEmbed } = require("discord.js")
const { QueryType } = require("discord-player-tlndxlrd")

module.exports = {
    data: new SlashCommandBuilder()
        .setName("play")
        .setDescription("–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ youtube –∏–ª–∏ spotify")
        .addStringOption((option) => option.setName("url_name").setDescription("–°—Å—ã–ª–∫–∞/–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç").setRequired(true)
        ),
    run: async (client, interaction, player) => {

        await interaction.deferReply({ ephemeral: true })

        let embed = new MessageEmbed()

        embed
            .setTitle('‚ùå |–û—à–∏–±–∫–∞')
            .setDescription("–ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç–µ—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

        if (!interaction.member.voice.channel) return interaction.editReply({ embeds: [embed] })

        const queue = await player.createQueue(interaction.guild, {
            metadata: {
                channel: interaction.channel
            }
        })

        if (!queue.connection) await queue.connect(interaction.member.voice.channel)

        let url = interaction.options.getString("url_name")
        const result = await player.search(url, {
            requestedBy: interaction.user,
            searchEngine: QueryType.AUTO
        })

        if (result.tracks.length === 0) {
            embed
                .setTitle('‚ùå |–û—à–∏–±–∫–∞')
                .setDescription("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
            return interaction.editReply({ embeds: [embed] })
        }

        const playlist = result.playlist
        const song = result.tracks[0]
        if (playlist) {
            if (result.tracks.length > 50) {
                embed
                    .setTitle('‚ùå |–û—à–∏–±–∫–∞')
                    .setDescription("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ 50 —Ç—Ä–µ–∫–æ–≤")
                return interaction.editReply({ embeds: [embed] })
            }
            try {
                await queue.addTracks(result.tracks)
                embed
                    .setTitle('‚úÖ |–í—ã–ø–æ–ª–Ω–µ–Ω–æ')
                    .setDescription(`üé∂ |**${result.tracks.length} —Ç—Ä–µ–∫–æ–≤ —Å –ø–ª–µ–π–ª–∏—Å—Ç–∞ [${playlist.title}](${playlist.url})** –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å`)
                    .setThumbnail(playlist.thumbnail)

                if (!queue.playing) { await queue.play() }

                return await interaction.channel.send({
                    embeds: [embed]
                })
            } catch (e) {
                console.log(e)
            }
        }

        if (queue.previousTracks[0]) {
            const track = result.tracks[0]
            await queue.addTrack(track)

            embed
                .setTitle('‚úÖ |–í—ã–ø–æ–ª–Ω–µ–Ω–æ')
                .setThumbnail(track.thumbnail)
                .setDescription(`üé∂ |–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å [${track.author} - ${track.title}](${track.url})`)
                .setFooter({ text: `üïû |–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${track.duration}` })

            if (!queue.playing) await queue.play()

            return await interaction.channel.send({
                embeds: [embed]
            })
        }

        if (song) {
            try {
                await queue.addTrack(song)
                if (!queue.playing) await queue.play();
                return

            } catch (e) {
                console.log(e)
            }
        }

        if (!queue.playing) await queue.play()

        await interaction.channel.send({
            embeds: [embed]
        })
    },
}