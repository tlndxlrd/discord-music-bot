const { SlashCommandBuilder } = require("@discordjs/builders")
const { MessageEmbed } = require("discord.js")

module.exports = {
    data: new SlashCommandBuilder()
        .setName("queue")
        .setDescription("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤")
        .addNumberOption((option) => option.setName("page").setDescription("C—Ç—Ä–∞–Ω–∏—Ü—ã –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–µ–∫–æ–≤").setMinValue(1)),

    run: async (client, interaction) => {

        const queue = client.player.getQueue(interaction.guildId)

        let embed = new MessageEmbed()

        embed
            .setTitle('‚ùå |–û—à–∏–±–∫–∞')
            .setDescription('–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤')

        if (!queue || !queue.playing) {
            return await interaction.reply({ embeds: [embed], ephemeral: true })
        }

        const totalPages = Math.ceil(queue.tracks.length / 10) || 1

        const page = (interaction.options.getNumber("page") || 1) - 1

        embed
            .setTitle('‚ùå |–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
            .setDescription(`–í—Å–µ–≥–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ ${totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ç—Ä–µ–∫–∞–º–∏`)

        if (page > totalPages) {
            return await interaction.reply({ embeds: [embed], ephemeral: true })
        }

        const queueString = queue.tracks.slice(page * 10, page * 10 + 10).map((song, i) => {
            return `**${page * 10 + i + 1}.** \`[üïû |${song.duration}]\` ${song.author} - ${song.title} -- <@${song.requestedBy.id}>`
        }).join("\n")

        const currentSong = queue.current

        embed
            .setTitle('‚úÖ |–í—ã–ø–æ–ª–Ω–µ–Ω–æ')
            .setDescription(`üé∂ |**–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç**\n` +
                (currentSong ? `\`[üïû |${currentSong.duration}]\` ${currentSong.author}  - ${currentSong.title} -- <@${currentSong.requestedBy.id}>` : "None") +
                `\n\n**–û—á–µ—Ä–µ–¥—å**\n${queueString}`
            )
            .setFooter({
                text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}`
            })
            .setThumbnail(currentSong.setThumbnail)

        await interaction.reply({
            embeds: [embed], ephemeral: true
        })
    }
}